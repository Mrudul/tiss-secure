#!/usr/bin/env python
# -*- coding: utf-8 -*-

Import('env')

from util import match_patterns, minifiables, filter_files
from fnmatch import fnmatch
from os.path import basename
from filesystem import walk_dir

SRC_DIR = './'
DEST_DIR = '../' + env['MEDIA_DEST_DIR'] + '/'

SCRIPT_FILES = Split("""
    script/base.js
    script/recruiters.js
    script/lib/chickoojs/src/jquery/color/jquery.color.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.tabs-1.0.3.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable-1.1.1.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable.autoscroll-1.0.1.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable.circular-0.5.1.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable.navigator-1.0.1.js
    script/lib/chickoojs/src/jquery/easing/jquery.easing.1.3.js
    script/lib/chickoojs/src/jquery/hoverIntent/jquery.hoverIntent.js
""")
#SCRIPT_FILES = ["script/" + f for f in SCRIPT_FILES]

IMAGE_FILES = Split("""
    image/background/rays.png
    image/logo_small.png
    image/logo_small_stroked.png
    image/logo_shield_small.png
    image/background/overlay_black.png
    image/background/separator.png
    image/img_shadow.png
    image/background/footer.png
    image/contact_us.png
    image/altiba/altiba-1.jpg
    image/altiba/altiba-2.jpg
    image/altiba/altiba-3.jpg
    image/altiba/altiba-4.jpg
    image/altiba/altiba-5.jpg
    image/altiba/altiba-6.jpg
    image/altiba/altiba-7.jpg
    image/altiba/thumbnail/altiba-1.jpg
    image/altiba/thumbnail/altiba-2.jpg
    image/altiba/thumbnail/altiba-3.jpg
    image/altiba/thumbnail/altiba-4.jpg
    image/altiba/thumbnail/altiba-5.jpg
    image/altiba/thumbnail/altiba-6.jpg
    image/altiba/thumbnail/altiba-7.jpg

""")

CSS_FILES = Split("""
    css/screen.css
""")

# Do not include IMAGE files in here.
# Please include them in IMAGE_FILES above.
# If you would like images to be copied "as is" without
# any optimizations, then you may include them here.
PLAIN_COPIES = SCRIPT_FILES + CSS_FILES + Split("""
    robots.txt
""")

PLAIN_COPY_DIRECTORIES = Split("""

""")

# Recursively add all the files in the directories to files to copy.
for directory in set(PLAIN_COPY_DIRECTORIES):
    files = [f[len(SRC_DIR):] for f in walk_dir(SRC_DIR + directory)]
    PLAIN_COPIES.extend(files)

# Plain copies.
for f in set(PLAIN_COPIES):
    env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))

# Optimize graphics
for f in IMAGE_FILES:
    filename = str(f)
    if match_patterns(filename, patterns=['*.png']):
        env.OptimizePNG(DEST_DIR + f, SRC_DIR + f)
    elif match_patterns(filename, patterns=['*.jpg', '*.jpeg']):
        env.OptimizeJPEG(DEST_DIR + f, SRC_DIR + f)
    else:
        env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))


# Stitching graphics together
stitched_images = [
        dict(
            target='image/logo_with_shield.png',
            sources=Split("""
                image/logo_shield.png
                image/logo_hrm_text.png
            """),
            orientation='horizontal'
            ),
        dict(
            target='image/recruiter_logos.jpg',
            sources=Split("""
                image/edited_logos/accenture.jpg
                image/edited_logos/asianpaints.jpg
                image/edited_logos/astrazeneca.jpg
                image/edited_logos/bennettcoleman.jpg
                image/edited_logos/bpcl.jpg
                image/edited_logos/cadbury.jpg
                image/edited_logos/citibank.jpg
                image/edited_logos/cocacola.jpg

                image/edited_logos/colgatepalmolive.jpg
                image/edited_logos/countrywidefinances.jpg
                image/edited_logos/deutschbank.jpg
                image/edited_logos/drreddy.jpg
                image/edited_logos/ernstyoung.jpg
                image/edited_logos/fidelity.jpg
                image/edited_logos/firstsource.jpg
                image/edited_logos/geshipping.jpg

                image/edited_logos/google.jpg
                image/edited_logos/hindustanunilever.jpg
                image/edited_logos/honeywell.jpg
                image/edited_logos/hpcl.jpg
                image/edited_logos/hsbc.jpg
                image/edited_logos/ibm.jpg
                image/edited_logos/iciciprudentials.jpg
                image/edited_logos/intel.jpg

                image/edited_logos/johnsonandjohnson.jpg
                image/edited_logos/jpmorganchase.jpg
                image/edited_logos/kpmg.jpg
                image/edited_logos/mahindra.jpg
                image/edited_logos/marico.jpg
                image/edited_logos/mercer.jpg
                image/edited_logos/microsoft.jpg
                image/edited_logos/motorola.jpg

                image/edited_logos/nestle.jpg
                image/edited_logos/nokia.jpg
                image/edited_logos/novartis.jpg
                image/edited_logos/oracle.jpg
                image/edited_logos/patni.jpg
                image/edited_logos/pepsi.jpg
                image/edited_logos/pfizer.jpg
                image/edited_logos/procterandgamble.jpg

                image/edited_logos/pwc.jpg
                image/edited_logos/ranbaxy.jpg
                image/edited_logos/rpg.jpg
                image/edited_logos/sap.jpg
                image/edited_logos/siemensindia.jpg
                image/edited_logos/standardchartered.jpg
                image/edited_logos/sterlite.jpg
                image/edited_logos/taj.jpg

                image/edited_logos/tata.jpg
                image/edited_logos/wipro.jpg
                image/edited_logos/yahoo.jpg
            """),
            orientation='horizontal'
            ),
]
for stitch in stitched_images:
    func = env.HStitchImages if stitch.get('orientation', 'horizontal') == 'horizontal' else env.VStitchImages
    func(DEST_DIR + stitch['target'], [SRC_DIR + f for f in stitch['sources']])


# Minification of the generated CSS and JS files.
MINIFIABLE_FILES = SCRIPT_FILES + CSS_FILES + Split("""

""")

# Exclude these files specifically from minification.
NON_MINIFIABLE_FILES = Split("""

""")


# Don't minify all files in one command.  Minify them separately.
# It keeps build times small.
for f in minifiables(MINIFIABLE_FILES, NON_MINIFIABLE_FILES):
    filepath = DEST_DIR + str(f)
    env.YuiCompressorMinify(filepath)
    #if fnmatch(basename(filepath), '*.js'):
    #    env.JsminMinify(filepath)

# Combine these JavaScript files and create a common js.
#
# Warning:  THE ORDER MATTERS.
#
#script/lib/cufon/js/cufon.js
#script/angelina_400.font.js
COMMON_JS_FILES =  Split("""
    script/lib/chickoojs/src/jquery/color/jquery.color.js
    script/lib/chickoojs/src/jquery/easing/jquery.easing.1.3.js
    script/lib/chickoojs/src/jquery/hoverIntent/jquery.hoverIntent.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.tabs-1.0.3.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable-1.1.1.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable.autoscroll-1.0.1.js
    script/lib/chickoojs/src/jquery/tools/1.1.1/tools.scrollable.circular-0.5.1.js
    script/base.js
""")
COMMON_JS_FILES = [SRC_DIR + f for f in COMMON_JS_FILES]
lib_common_js = env.Concatenate([DEST_DIR + 'script/common.js'], COMMON_JS_FILES)
env.YuiCompressorMinify(lib_common_js)
#env.JsminMinify(lib_common_js)

# Include licenses.
#c3 = env.Concatenate([DEST_DIR + 'script/lib/all-min.js'], [
#    DEST_DIR + 'script/LICENSES',
#    DEST_DIR + 'script/lib/all_o-min.js',
#])

